    # Answer Key page
    if include_answer_key:
        from reportlab.platypus import PageBreak
        story.append(PageBreak())
        story.append(Paragraph("Answer Key", title_style))
        story.append(Paragraph(title, name_style))
        story.append(Spacer(0, 0.2 * inch))

        ans_data = []
        for r in range(rows):
            left_idx = r
            right_idx = r + rows
            # Extract lhs without blanks for answers
            def lhs_text(t: str) -> str:
                return t.split('=')[0].strip() if '=' in t else t.strip()

            left_problem, left_ans = items[left_idx]
            right_problem, right_ans = items[right_idx]

            use_lhs = answer_key_use_lhs
            prefix = answer_key_prefix
            if 'Solve for x' in title:
                # For solve-for-x sheets, show only the numeric answer (no LHS, no prefix)
                use_lhs = False
                prefix = ''

            if use_lhs:
                left_str = f"{left_idx + 1}) {lhs_text(left_problem)} = {left_ans}"
                right_str = f"{right_idx + 1}) {lhs_text(right_problem)} = {right_ans}"
            else:
                left_str = f"{left_idx + 1}) {prefix}{left_ans}"
                right_str = f"{right_idx + 1}) {prefix}{right_ans}"

            left_para = make_cell(left_str, col_width)
            right_para = make_cell(right_str, col_width)
            ans_data.append([left_para, right_para])

        ans_tbl = Table(ans_data, colWidths=[col_width, col_width], rowHeights=[row_height] * rows)
        ans_tbl.setStyle(TableStyle([
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('LEFTPADDING', (0, 0), (-1, -1), 2),
            ('RIGHTPADDING', (0, 0), (-1, -1), 2),
            ('TOPPADDING', (0, 0), (-1, -1), 1),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 1),
        ]))
        story.append(ans_tbl)

    # Build document
    doc.build(story)
    buffer.seek(0)
    return buffer.getvalue()


def main():
    st.set_page_config(page_title="Addition and Subtraction Practice", page_icon="ðŸ§®", layout="centered")
    st.title("Addition and Subtraction Practice (3-digit) V6")
    st.caption("Generates 8Ã—2 mixed addition and subtraction with results between 0 and 999.")

    # Controls
    col1, col2, _ = st.columns([1, 1, 2])
    with col1:
        seed_text = st.text_input("Seed (optional)", value="")
    with col2:
        regen = st.button("Generate Worksheet", type="primary")

    if seed_text.strip():
        try:
            random.seed(int(seed_text.strip()))
        except ValueError:
            random.seed(seed_text.strip())  # allow any string as seed

    # Persist problems in session state
    if "problems" not in st.session_state or regen:
        st.session_state["problems"] = generate_problems(16)

    problems = st.session_state["problems"]

    # Preview on page: 8 rows x 2 columns (numbered)
    st.subheader("Preview")
    left, right = st.columns(2)
    for i in range(8):
        with left:
            st.write(f"{i+1}) {problems[i][0]} = ______")
        with right:
            st.write(f"{i+9}) {problems[i + 8][0]} = ______")

    # Build PDF and provide download
    try:
        pdf_bytes = build_pdf(problems, right_label="= ______")
        st.download_button(
            label="Download Printable PDF",
            data=pdf_bytes,
            file_name="worksheet_3digit_add_sub_8x2.pdf",
            mime="application/pdf",
        )
    except RuntimeError as e:
        st.warning(str(e))
        st.info("If you do not want to install ReportLab, I can also export a plain text file.")
        txt = "\n".join([p[0] for p in problems])
        st.download_button(
            label="Download as .txt (fallback)",
            data=txt,
            file_name="worksheet_3digit_add_sub_10x2.txt",
            mime="text/plain",
        )


if __name__ == "__main__":
    main()
